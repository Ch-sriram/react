// Required Packages/Dependencies
import React, { Component } from 'react';
import AppStyleClasses from './App.module.css';

// Custom Components
import Person from './components/person/person.component';
import ErrorBoundary from './components/error-boundary/error-boundary.component';


class App extends Component {
  state = {
    persons: [
      { name: 'Ram', age: 28, id: 'a1' },
      { name: 'Roop', age: 29, id: 'a2' },
      { name: 'Max', age: 28, id: 'a3' }
    ],
    otherState: "This has some value",
    showPersons: false
  }

  nameChangedHandler = (event, id) => {
    const personIndex = this.state.persons.findIndex(
      person => person.id === id
    );
    const person = { ...this.state.persons[personIndex] };
    person.name = event.target.value;

    const personsList = [...this.state.persons];
    personsList[personIndex] = person;

    this.setState({persons: personsList});
  }
  
  deletePersonHandler = (personIndex) => {
    const personsList = [...this.state.persons];
    personsList.splice(personIndex, 1);
    this.setState({ persons: personsList });
  }

  togglePersonsHandler = () => {
    this.setState({ showPersons: !this.state.showPersons });
  }

  render() {
    let persons = null;
    let btnAppStyleClasses = [AppStyleClasses.Button];
    
    if (this.state.showPersons) {
      /**
       * ErrorBoundary is a Higher Order Component (HOC), which
       * is basically a component which wraps another component
       * with some kind of a goal (in this case, the HOC, which
       * is ErrorBoundary, handles any error caused when
       * rendering the Person component). 
       * 
       * And also, the `key` prop is now given to ErrorBoundary 
       * component as that's the top-level component now.
       */
      persons = (
        <div>
          {this.state.persons.map((person, index) => {
            return (
              <ErrorBoundary key={person.id}>
                <Person
                  click={() => this.deletePersonHandler(index)}
                  name={person.name}
                  age={person.age}
                  changed={event => this.nameChangedHandler(event, person.id)}
                />
              </ErrorBoundary>
            );
          })}
        </div>
      );

      btnAppStyleClasses.push(AppStyleClasses.Red);
    }

    const classes = [];

    if (this.state.persons.length <= 2 && classes.indexOf(AppStyleClasses.red) === -1) {
      classes.push(AppStyleClasses.red);
    }
    
    if (this.state.persons.length <= 1 && classes.indexOf(AppStyleClasses.bold) === -1) {
      classes.push(AppStyleClasses.bold);
    }

    return (
      <div className={AppStyleClasses.App}>
        <h1>This is a React Example</h1>
        <p className={classes.join(" ")}>This is really working!</p>

        <button className={btnAppStyleClasses.join(" ")} onClick={this.togglePersonsHandler}>
          Toggle Persons
        </button>
        {persons}
      </div>
    );
  }
}

export default App;

/**
 * Right now, in our application, we won't be utilizing the full
 * potential of error boundaries, it is only useful during 
 * production of the app, not at development. Because during
 * development, the message generated by the error boundary 
 * related components are not shown. But when the app is in 
 * production, only the component that generated the error will
 * be showing the message written by the programmer, all the
 * components are never affected.
 */
